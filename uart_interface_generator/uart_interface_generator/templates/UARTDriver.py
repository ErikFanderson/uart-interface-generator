#===============================================================================
# User: erik
# Date: 02/26/21
# Path: /home/erik/repos/github/uart-interface-generator/build/uart_led/02-26-2021-11-50-01/UARTDriver.py
#===============================================================================
import serial
class UARTDriver:
    """Autogenerated UARTDriver from UART-interface-generator"""
    def __init__(self, **kwargs):
        self._ser = serial.Serial(**kwargs)
        self._fields = {{fields}}
#-------------------------------------------------------------------------------
# Basic read/write methods
#-------------------------------------------------------------------------------
    def open(self):
        self._ser.open()

    def close(self):
        self._ser.reset_input_buffer()
        self._ser.reset_output_buffer()
        self._ser.close()
 
    def write_byte(self, address: int, data: int):
        num_bytes = self._ser.write(bytes([address, data]))
 
    def read_byte(self, address: int) -> int:
        self._ser.write((address + 128).to_bytes(1, "big"))
        return int.from_bytes(self._ser.read(), "big")
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Register sections
#-------------------------------------------------------------------------------
    def resize(self, bin_string, new_width):
        if len(bin_string) > new_width: # Truncate
            return bin_string[len(bin_string) - new_width:len(bin_string) - 1]
        elif len(bin_string) < new_width: # Extend
            return (new_width - len(bin_string))*"0" + bin_string
        else:
            return bin_string
    
    def read_all_bytes(self, field: str, reg: str) -> str:
        bin_strings = []
        for i in range(self._fields[field]["registers"][reg]["lsbit_address"], self._fields[field]["registers"][reg]["msbit_address"] + 1):
            bin_strings.append(f'{self.read_byte(i):08b}')
        bin_string = ""
        for i, bs in enumerate(bin_strings):
            bin_string += bin_strings[len(bin_strings)-1-i]
        return bin_string
    
    def read_register(self, field: str, reg: str) -> str:
        bin_string = self.read_all_bytes(field, reg)
        return self.resize(bin_string, self._fields[field]["registers"][reg]["width"])
    
    def write_register(self, field: str, reg: str, bin_string: str):
        # Read current value first
        current_value = self.read_all_bytes(field, reg)
        num_bits = len(current_value)
        # Resize binary value to write
        bin_string = self.resize(bin_string, self._fields[field]["registers"][reg]["width"])
        # Create new full value for all registers
        new_bin_string = list(current_value)
        for i, char in enumerate(bin_string):
            new_bin_string[(i + 1) * -1] = bin_string[(i + 1) * -1]
        new_bin_string = "".join(new_bin_string)
        # Write bytes
        for addr in range(self._fields[field]["registers"][reg]["lsbit_address"], self._fields[field]["registers"][reg]["msbit_address"] + 1):
            i = addr - self._fields[field]["registers"][reg]["lsbit_address"]
            lsb = (num_bits - 1) - i * 8 + 1
            msb = (num_bits - 1) - ((i + 1) * 8) + 1
            data = new_bin_string[msb:lsb]
            #print(f"Data: {data} - bin_string[{msb}:{lsb}]")
            self.write_byte(addr, int(data, 2))
#-------------------------------------------------------------------------------
